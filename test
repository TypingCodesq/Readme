local ReplicatedStorage = game:GetService("ReplicatedStorage")
local InsertService = game:GetService("InsertService")
local MarketplaceService = game:GetService("MarketplaceService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

local LocalPlayer = Players.LocalPlayer
local Leaderstats = LocalPlayer.leaderstats
local Backpack = LocalPlayer.Backpack
local PlayerGui = LocalPlayer.PlayerGui

local ShecklesCount = Leaderstats.Sheckles
local GameInfo = MarketplaceService:GetProductInfo(game.PlaceId)

-- Remove old GUI if exists
if PlayerGui:FindFirstChild("FarmingHub") then
    PlayerGui.FarmingHub:Destroy()
end

--// Folders
local GameEvents = ReplicatedStorage.GameEvents
local Farms = workspace.Farm

-- UI Icons (using Unicode and rbxasset icons)
local Icons = {
    Plant = "üå±",
    Harvest = "üåæ",
    Buy = "üí∞",
    Sell = "üí∏",
    Walk = "üö∂",
    Settings = "‚öôÔ∏è",
    Home = "üè†",
    Farm = "üöú",
    Seed = "ü•ï",
    Money = "üíµ",
    Speed = "‚ö°",
    Auto = "ü§ñ",
    Close = "‚úï",
    Minimize = "‚îÄ",
    Info = "‚ÑπÔ∏è"
}

-- Color Theme
local Theme = {
    Primary = Color3.fromRGB(46, 204, 113),      -- Green
    Secondary = Color3.fromRGB(39, 174, 96),     -- Dark Green
    Background = Color3.fromRGB(44, 62, 80),     -- Dark Blue
    Surface = Color3.fromRGB(52, 73, 94),        -- Blue Gray
    Text = Color3.fromRGB(236, 240, 241),        -- Light Gray
    TextSecondary = Color3.fromRGB(149, 165, 166), -- Gray
    Accent = Color3.fromRGB(155, 89, 182),       -- Purple
    Warning = Color3.fromRGB(230, 126, 34),      -- Orange
    Error = Color3.fromRGB(231, 76, 60),         -- Red
    Success = Color3.fromRGB(46, 204, 113),      -- Green
}

--// Dicts and Variables
local SeedStock = {}
local OwnedSeeds = {}
local HarvestIgnores = {
    Normal = false,
    Gold = false,
    Rainbow = false
}

--// Globals
local SelectedSeed, AutoPlantRandom, AutoPlant, AutoHarvest, AutoBuy, SellThreshold, NoClip, AutoWalkAllowRandom
local AutoWalk, AutoSell, AutoWalkMaxWait, AutoWalkStatus, SelectedSeedStock

-- Status variables
local PlantingStatus = false
local HarvestingStatus = false
local BuyingStatus = false
local WalkingStatus = false

-- Animation functions
local function CreateTween(object, properties, duration, easingStyle, easingDirection)
    duration = duration or 0.3
    easingStyle = easingStyle or Enum.EasingStyle.Quad
    easingDirection = easingDirection or Enum.EasingDirection.Out
    
    local tween = TweenService:Create(object, TweenInfo.new(duration, easingStyle, easingDirection), properties)
    return tween
end

local function AnimateIn(object, delay)
    delay = delay or 0
    object.Position = object.Position + UDim2.new(0, 0, 0, 50)
    object.Transparency = 1
    
    wait(delay)
    
    local tween1 = CreateTween(object, {Position = object.Position - UDim2.new(0, 0, 0, 50)}, 0.5, Enum.EasingStyle.Back)
    local tween2 = CreateTween(object, {Transparency = 0}, 0.3)
    
    tween1:Play()
    tween2:Play()
end

local function CreateRippleEffect(button)
    button.MouseButton1Click:Connect(function()
        local ripple = Instance.new("Frame")
        ripple.Name = "Ripple"
        ripple.Size = UDim2.new(0, 0, 0, 0)
        ripple.Position = UDim2.new(0.5, 0, 0.5, 0)
        ripple.AnchorPoint = Vector2.new(0.5, 0.5)
        ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        ripple.Transparency = 0.8
        ripple.BorderSizePixel = 0
        ripple.Parent = button
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(1, 0)
        corner.Parent = ripple
        
        local tween = CreateTween(ripple, {
            Size = UDim2.new(2, 0, 2, 0),
            Transparency = 1
        }, 0.6, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
        
        tween:Play()
        tween.Completed:Connect(function()
            ripple:Destroy()
        end)
    end)
end

-- Create main GUI
local function CreateMainGUI()
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "FarmingHub"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.Parent = PlayerGui
    
    -- Main Frame
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 450, 0, 600)
    MainFrame.Position = UDim2.new(0.5, -225, 0.5, -300)
    MainFrame.BackgroundColor3 = Theme.Background
    MainFrame.BorderSizePixel = 0
    MainFrame.Parent = ScreenGui
    
    -- Corner for main frame
    local MainCorner = Instance.new("UICorner")
    MainCorner.CornerRadius = UDim.new(0, 15)
    MainCorner.Parent = MainFrame
    
    -- Drop shadow
    local Shadow = Instance.new("ImageLabel")
    Shadow.Name = "Shadow"
    Shadow.Size = UDim2.new(1, 20, 1, 20)
    Shadow.Position = UDim2.new(0, -10, 0, -10)
    Shadow.BackgroundTransparency = 1
    Shadow.Image = "rbxasset://textures/ui/InspectMenu/Shadow.png"
    Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    Shadow.ImageTransparency = 0.8
    Shadow.ScaleType = Enum.ScaleType.Slice
    Shadow.SliceCenter = Rect.new(10, 10, 118, 118)
    Shadow.Parent = MainFrame
    
    -- Title Bar
    local TitleBar = Instance.new("Frame")
    TitleBar.Name = "TitleBar"
    TitleBar.Size = UDim2.new(1, 0, 0, 50)
    TitleBar.BackgroundColor3 = Theme.Primary
    TitleBar.BorderSizePixel = 0
    TitleBar.Parent = MainFrame
    
    local TitleCorner = Instance.new("UICorner")
    TitleCorner.CornerRadius = UDim.new(0, 15)
    TitleCorner.Parent = TitleBar
    
    -- Fix title bar corners
    local TitleFix = Instance.new("Frame")
    TitleFix.Size = UDim2.new(1, 0, 0, 15)
    TitleFix.Position = UDim2.new(0, 0, 1, -15)
    TitleFix.BackgroundColor3 = Theme.Primary
    TitleFix.BorderSizePixel = 0
    TitleFix.Parent = TitleBar
    
    -- Title
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Size = UDim2.new(1, -100, 1, 0)
    Title.Position = UDim2.new(0, 15, 0, 0)
    Title.BackgroundTransparency = 1
    Title.Text = Icons.Farm .. " Farm Hub Pro"
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextScaled = true
    Title.Font = Enum.Font.GothamBold
    Title.Parent = TitleBar
    
    -- Close Button
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Size = UDim2.new(0, 40, 0, 40)
    CloseButton.Position = UDim2.new(1, -45, 0, 5)
    CloseButton.BackgroundColor3 = Theme.Error
    CloseButton.BorderSizePixel = 0
    CloseButton.Text = Icons.Close
    CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.TextScaled = true
    CloseButton.Font = Enum.Font.GothamBold
    CloseButton.Parent = TitleBar
    
    local CloseCorner = Instance.new("UICorner")
    CloseCorner.CornerRadius = UDim.new(0, 8)
    CloseCorner.Parent = CloseButton
    
    CreateRippleEffect(CloseButton)
    
    CloseButton.MouseButton1Click:Connect(function()
        local closeTween = CreateTween(MainFrame, {
            Size = UDim2.new(0, 0, 0, 0),
            Position = UDim2.new(0.5, 0, 0.5, 0)
        }, 0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In)
        closeTween:Play()
        closeTween.Completed:Connect(function()
            ScreenGui:Destroy()
        end)
    end)
    
    -- Content Frame
    local ContentFrame = Instance.new("ScrollingFrame")
    ContentFrame.Name = "ContentFrame"
    ContentFrame.Size = UDim2.new(1, -20, 1, -70)
    ContentFrame.Position = UDim2.new(0, 10, 0, 60)
    ContentFrame.BackgroundTransparency = 1
    ContentFrame.BorderSizePixel = 0
    ContentFrame.ScrollBarThickness = 8
    ContentFrame.ScrollBarImageColor3 = Theme.Primary
    ContentFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    ContentFrame.Parent = MainFrame
    
    -- Layout for content
    local ContentLayout = Instance.new("UIListLayout")
    ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ContentLayout.Padding = UDim.new(0, 15)
    ContentLayout.Parent = ContentFrame
    
    -- Auto-resize canvas
    ContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        ContentFrame.CanvasSize = UDim2.new(0, 0, 0, ContentLayout.AbsoluteContentSize.Y + 20)
    end)
    
    return ScreenGui, MainFrame, ContentFrame
end

-- Create animated section
local function CreateSection(parent, title, icon, layoutOrder)
    local Section = Instance.new("Frame")
    Section.Name = title .. "Section"
    Section.Size = UDim2.new(1, 0, 0, 0)
    Section.BackgroundColor3 = Theme.Surface
    Section.BorderSizePixel = 0
    Section.LayoutOrder = layoutOrder
    Section.Parent = parent
    
    local SectionCorner = Instance.new("UICorner")
    SectionCorner.CornerRadius = UDim.new(0, 12)
    SectionCorner.Parent = Section
    
    -- Section Header
    local Header = Instance.new("TextButton")
    Header.Name = "Header"
    Header.Size = UDim2.new(1, 0, 0, 45)
    Header.BackgroundColor3 = Theme.Primary
    Header.BorderSizePixel = 0
    Header.Text = icon .. " " .. title
    Header.TextColor3 = Color3.fromRGB(255, 255, 255)
    Header.TextScaled = true
    Header.Font = Enum.Font.GothamBold
    Header.Parent = Section
    
    local HeaderCorner = Instance.new("UICorner")
    HeaderCorner.CornerRadius = UDim.new(0, 12)
    HeaderCorner.Parent = Header
    
    -- Content container
    local Content = Instance.new("Frame")
    Content.Name = "Content"
    Content.Size = UDim2.new(1, -20, 0, 0)
    Content.Position = UDim2.new(0, 10, 0, 55)
    Content.BackgroundTransparency = 1
    Content.BorderSizePixel = 0
    Content.Parent = Section
    
    local ContentLayout = Instance.new("UIListLayout")
    ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ContentLayout.Padding = UDim.new(0, 10)
    ContentLayout.Parent = Content
    
    -- Expansion logic
    local isExpanded = true
    local function toggleExpansion()
        isExpanded = not isExpanded
        
        local targetSize = isExpanded and 
            UDim2.new(1, 0, 0, 65 + ContentLayout.AbsoluteContentSize.Y) or
            UDim2.new(1, 0, 0, 45)
        
        local tween = CreateTween(Section, {Size = targetSize}, 0.4, Enum.EasingStyle.Quart)
        tween:Play()
        
        Content.Visible = isExpanded
        
        -- Animate header
        local headerTween = CreateTween(Header, {
            BackgroundColor3 = isExpanded and Theme.Primary or Theme.Secondary
        }, 0.3)
        headerTween:Play()
    end
    
    Header.MouseButton1Click:Connect(toggleExpansion)
    CreateRippleEffect(Header)
    
    -- Auto-resize based on content
    ContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        if isExpanded then
            Section.Size = UDim2.new(1, 0, 0, 65 + ContentLayout.AbsoluteContentSize.Y)
        end
    end)
    
    -- Initial size
    toggleExpansion()
    
    return Section, Content
end

-- Create toggle button
local function CreateToggle(parent, text, icon, defaultValue, callback)
    local Toggle = Instance.new("Frame")
    Toggle.Name = text .. "Toggle"
    Toggle.Size = UDim2.new(1, 0, 0, 35)
    Toggle.BackgroundTransparency = 1
    Toggle.Parent = parent
    
    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, -60, 1, 0)
    Label.BackgroundTransparency = 1
    Label.Text = icon .. " " .. text
    Label.TextColor3 = Theme.Text
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.TextScaled = true
    Label.Font = Enum.Font.Gotham
    Label.Parent = Toggle
    
    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Size = UDim2.new(0, 50, 0, 25)
    ToggleButton.Position = UDim2.new(1, -50, 0.5, -12.5)
    ToggleButton.BackgroundColor3 = defaultValue and Theme.Success or Theme.TextSecondary
    ToggleButton.BorderSizePixel = 0
    ToggleButton.Text = ""
    ToggleButton.Parent = Toggle
    
    local ToggleCorner = Instance.new("UICorner")
    ToggleCorner.CornerRadius = UDim.new(1, 0)
    ToggleCorner.Parent = ToggleButton
    
    local ToggleKnob = Instance.new("Frame")
    ToggleKnob.Size = UDim2.new(0, 21, 0, 21)
    ToggleKnob.Position = defaultValue and UDim2.new(1, -23, 0.5, -10.5) or UDim2.new(0, 2, 0.5, -10.5)
    ToggleKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ToggleKnob.BorderSizePixel = 0
    ToggleKnob.Parent = ToggleButton
    
    local KnobCorner = Instance.new("UICorner")
    KnobCorner.CornerRadius = UDim.new(1, 0)
    KnobCorner.Parent = ToggleKnob
    
    local value = defaultValue
    
    ToggleButton.MouseButton1Click:Connect(function()
        value = not value
        
        local colorTween = CreateTween(ToggleButton, {
            BackgroundColor3 = value and Theme.Success or Theme.TextSecondary
        }, 0.3)
        
        local positionTween = CreateTween(ToggleKnob, {
            Position = value and UDim2.new(1, -23, 0.5, -10.5) or UDim2.new(0, 2, 0.5, -10.5)
        }, 0.3, Enum.EasingStyle.Quart)
        
        colorTween:Play()
        positionTween:Play()
        
        if callback then
            callback(value)
        end
    end)
    
    return {
        Value = value,
        GetValue = function() return value end,
        SetValue = function(newValue)
            value = newValue
            ToggleButton.BackgroundColor3 = value and Theme.Success or Theme.TextSecondary
            ToggleKnob.Position = value and UDim2.new(1, -23, 0.5, -10.5) or UDim2.new(0, 2, 0.5, -10.5)
        end
    }
end

-- Create button
local function CreateButton(parent, text, icon, callback)
    local Button = Instance.new("TextButton")
    Button.Size = UDim2.new(1, 0, 0, 40)
    Button.BackgroundColor3 = Theme.Primary
    Button.BorderSizePixel = 0
    Button.Text = icon .. " " .. text
    Button.TextColor3 = Color3.fromRGB(255, 255, 255)
    Button.TextScaled = true
    Button.Font = Enum.Font.GothamBold
    Button.Parent = parent
    
    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = UDim.new(0, 8)
    ButtonCorner.Parent = Button
    
    CreateRippleEffect(Button)
    
    Button.MouseEnter:Connect(function()
        local tween = CreateTween(Button, {BackgroundColor3 = Theme.Secondary}, 0.2)
        tween:Play()
    end)
    
    Button.MouseLeave:Connect(function()
        local tween = CreateTween(Button, {BackgroundColor3 = Theme.Primary}, 0.2)
        tween:Play()
    end)
    
    if callback then
        Button.MouseButton1Click:Connect(callback)
    end
    
    return Button
end

-- Create slider
local function CreateSlider(parent, text, icon, minValue, maxValue, defaultValue, callback)
    local SliderFrame = Instance.new("Frame")
    SliderFrame.Size = UDim2.new(1, 0, 0, 60)
    SliderFrame.BackgroundTransparency = 1
    SliderFrame.Parent = parent
    
    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, 0, 0, 25)
    Label.BackgroundTransparency = 1
    Label.Text = icon .. " " .. text .. ": " .. defaultValue
    Label.TextColor3 = Theme.Text
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.TextScaled = true
    Label.Font = Enum.Font.Gotham
    Label.Parent = SliderFrame
    
    local SliderBack = Instance.new("Frame")
    SliderBack.Size = UDim2.new(1, 0, 0, 6)
    SliderBack.Position = UDim2.new(0, 0, 0, 35)
    SliderBack.BackgroundColor3 = Theme.TextSecondary
    SliderBack.BorderSizePixel = 0
    SliderBack.Parent = SliderFrame
    
    local SliderCorner = Instance.new("UICorner")
    SliderCorner.CornerRadius = UDim.new(1, 0)
    SliderCorner.Parent = SliderBack
    
    local SliderFill = Instance.new("Frame")
    SliderFill.Size = UDim2.new((defaultValue - minValue) / (maxValue - minValue), 0, 1, 0)
    SliderFill.BackgroundColor3 = Theme.Primary
    SliderFill.BorderSizePixel = 0
    SliderFill.Parent = SliderBack
    
    local FillCorner = Instance.new("UICorner")
    FillCorner.CornerRadius = UDim.new(1, 0)
    FillCorner.Parent = SliderFill
    
    local SliderKnob = Instance.new("Frame")
    SliderKnob.Size = UDim2.new(0, 16, 0, 16)
    SliderKnob.Position = UDim2.new((defaultValue - minValue) / (maxValue - minValue), -8, 0.5, -8)
    SliderKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    SliderKnob.BorderSizePixel = 0
    SliderKnob.Parent = SliderBack
    
    local KnobCorner = Instance.new("UICorner")
    KnobCorner.CornerRadius = UDim.new(1, 0)
    KnobCorner.Parent = SliderKnob
    
    local value = defaultValue
    local dragging = false
    
    local function updateSlider(input)
        local pos = math.clamp((input.Position.X - SliderBack.AbsolutePosition.X) / SliderBack.AbsoluteSize.X, 0, 1)
        value = math.floor(minValue + (maxValue - minValue) * pos)
        
        Label.Text = icon .. " " .. text .. ": " .. value
        
        local tween1 = CreateTween(SliderFill, {Size = UDim2.new(pos, 0, 1, 0)}, 0.1)
        local tween2 = CreateTween(SliderKnob, {Position = UDim2.new(pos, -8, 0.5, -8)}, 0.1)
        
        tween1:Play()
        tween2:Play()
        
        if callback then
            callback(value)
        end
    end
    
    SliderBack.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            updateSlider(input)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSlider(input)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    return {
        Value = value,
        GetValue = function() return value end
    }
end

-- Create status label
local function CreateStatusLabel(parent, text, icon)
    local StatusFrame = Instance.new("Frame")
    StatusFrame.Size = UDim2.new(1, 0, 0, 30)
    StatusFrame.BackgroundColor3 = Theme.Background
    StatusFrame.BorderSizePixel = 0
    StatusFrame.Parent = parent
    
    local StatusCorner = Instance.new("UICorner")
    StatusCorner.CornerRadius = UDim.new(0, 8)
    StatusCorner.Parent = StatusFrame
    
    local StatusLabel = Instance.new("TextLabel")
    StatusLabel.Size = UDim2.new(1, -10, 1, 0)
    StatusLabel.Position = UDim2.new(0, 5, 0, 0)
    StatusLabel.BackgroundTransparency = 1
    StatusLabel.Text = icon .. " " .. text
    StatusLabel.TextColor3 = Theme.TextSecondary
    StatusLabel.TextXAlignment = Enum.TextXAlignment.Left
    StatusLabel.TextScaled = true
    StatusLabel.Font = Enum.Font.Gotham
    StatusLabel.Parent = StatusFrame
    
    return StatusLabel
end

--// Original Functions (Enhanced)
local function Plant(Position: Vector3, Seed: string)
    GameEvents.Plant_RE:FireServer(Position, Seed)
    wait(.3)
end

local function GetFarms()
    return Farms:GetChildren()
end

local function GetFarmOwner(Farm: Folder): string
    local Important = Farm.Important
    local Data = Important.Data
    local Owner = Data.Owner
    return Owner.Value
end

local function GetFarm(PlayerName: string): Folder?
    local Farms = GetFarms()
    for _, Farm in next, Farms do
        local Owner = GetFarmOwner(Farm)
        if Owner == PlayerName then
            return Farm
        end
    end
    return
end

local IsSelling = false
local function SellInventory()
    local Character = LocalPlayer.Character
    local Previous = Character:GetPivot()
    local PreviousSheckles = ShecklesCount.Value

    if IsSelling then return end
    IsSelling = true

    Character:PivotTo(CFrame.new(62, 4, -26))
    while wait() do
        if ShecklesCount.Value ~= PreviousSheckles then break end
        GameEvents.Sell_Inventory:FireServer()
    end
    Character:PivotTo(Previous)

    wait(0.2)
    IsSelling = false
end

local function BuySeed(Seed: string)
    GameEvents.BuySeedStock:FireServer(Seed)
end

local function GetSeedInfo(Seed: Tool): number?
    local PlantName = Seed:FindFirstChild("Plant_Name")
    local Count = Seed:FindFirstChild("Numbers")
    if not PlantName then return end
    return PlantName.Value, Count.Value
end

local function CollectSeedsFromParent(Parent, Seeds: table)
    for _, Tool in next, Parent:GetChildren() do
        local Name, Count = GetSeedInfo(Tool)
        if not Name then continue end
        Seeds[Name] = {
            Count = Count,
            Tool = Tool
        }
    end
end

local function GetOwnedSeeds(): table
    local Character = LocalPlayer.Character
    OwnedSeeds = {}
    CollectSeedsFromParent(Backpack, OwnedSeeds)
    CollectSeedsFromParent(Character, OwnedSeeds)
    return OwnedSeeds
end

local function GetInvCrops(): table
    local Character = LocalPlayer.Character
    local Crops = {}
    
    local function collectCrops(Parent)
        for _, Tool in next, Parent:GetChildren() do
            local Name = Tool:FindFirstChild("Item_String")
            if Name then
                table.insert(Crops, Tool)
            end
        end
    end
    
    collectCrops(Backpack)
    collectCrops(Character)
    return Crops
end

local function GetPlantPositions()
    local positions = {}
    for _, location in pairs(PlantLocations:GetChildren()) do
        table.insert(positions, location.Position)
    end
    return positions
end

local function GetRandomPlantPosition()
    local positions = GetPlantPositions()
    if #positions > 0 then
        return positions[math.random(1, #positions)]
    end
    return nil
end

local function HasSeedInInventory(seedName)
    local seeds = GetOwnedSeeds()
    return seeds[seedName] and seeds[seedName].Count > 0
end

local function GetReadyToHarvest()
    local ready = {}
    for _, plant in pairs(PlantsPhysical:GetChildren()) do
        local plantType = plant:GetAttribute("Type") or "Normal"
        if not HarvestIgnores[plantType] then
            table.insert(ready, plant)
        end
    end
    return ready
end

-- Get farm data
local MyFarm = GetFarm(LocalPlayer.Name)
if not MyFarm then
    warn("Farm not found!")
    return
end

local MyImportant = MyFarm.Important
local PlantLocations = MyImportant.Plant_Locations
local PlantsPhysical = MyImportant.Plants_Physical

-- Create the UI
local ScreenGui, MainFrame, ContentFrame = CreateMainGUI()

-- Create sections
local PlantSection, PlantContent = CreateSection(ContentFrame, "Auto Plant", Icons.Plant, 1)
local HarvestSection, HarvestContent = CreateSection(ContentFrame, "Auto Harvest", Icons.Harvest, 2)
local BuySection, BuyContent = CreateSection(ContentFrame, "Auto Buy", Icons.Buy, 3)
local SellSection, SellContent = CreateSection(ContentFrame, "Auto Sell", Icons.Sell, 4)
local WalkSection, WalkContent = CreateSection(ContentFrame, "Auto Walk", Icons.Walk, 5)

-- (Previous code remains unchanged until the cutoff point)

-- Plant Section Controls (continued)
local SeedDropdown = Instance.new("TextButton")
SeedDropdown.Size = UDim2.new(1, 0, 0, 40)
SeedDropdown.BackgroundColor3 = Theme.Primary
SeedDropdown.BorderSizePixel = 0
SeedDropdown.Text = Icons.Seed .. " Select Seed"
SeedDropdown.TextColor3 = Color3.fromRGB(255, 255, 255)
SeedDropdown.TextScaled = true
SeedDropdown.Font = Enum.Font.Gotham
SeedDropdown.Parent = PlantContent

local DropdownCorner = Instance.new("UICorner")
DropdownCorner.CornerRadius = UDim.new(0, 8)
DropdownCorner.Parent = SeedDropdown

local DropdownList = Instance.new("Frame")
DropdownList.Size = UDim2.new(1, 0, 0, 0)
DropdownList.Position = UDim2.new(0, 0, 1, 5)
DropdownList.BackgroundColor3 = Theme.Surface
DropdownList.BorderSizePixel = 0
DropdownList.Visible = false
DropdownList.Parent = SeedDropdown

local DropdownListCorner = Instance.new("UICorner")
DropdownListCorner.CornerRadius = UDim.new(0, 8)
DropdownListCorner.Parent = DropdownList

local DropdownLayout = Instance.new("UIListLayout")
DropdownLayout.SortOrder = Enum.SortOrder.LayoutOrder
DropdownLayout.Padding = UDim.new(0, 5)
DropdownLayout.Parent = DropdownList

local function UpdateSeedDropdown()
    for _, child in pairs(DropdownList:GetChildren()) do
        if child:IsA("TextButton") then
            child:Destroy()
        end
    end
    
    local seeds = GetOwnedSeeds()
    for seedName, _ in pairs(seeds) do
        local SeedOption = Instance.new("TextButton")
        SeedOption.Size = UDim2.new(1, 0, 0, 30)
        SeedOption.BackgroundColor3 = Theme.Secondary
        SeedOption.BorderSizePixel = 0
        SeedOption.Text = Icons.Seed .. " " .. seedName
        SeedOption.TextColor3 = Theme.Text
        SeedOption.TextScaled = true
        SeedOption.Font = Enum.Font.Gotham
        SeedOption.Parent = DropdownList
        
        local OptionCorner = Instance.new("UICorner")
        OptionCorner.CornerRadius = UDim.new(0, 8)
        OptionCorner.Parent = SeedOption
        
        CreateRippleEffect(SeedOption)
        
        SeedOption.MouseButton1Click:Connect(function()
            SelectedSeed = seedName
            SeedDropdown.Text = Icons.Seed .. " " .. seedName
            DropdownList.Visible = false
            local tween = CreateTween(DropdownList, {Size = UDim2.new(1, 0, 0, 0)}, 0.3)
            tween:Play()
        end)
    end
    
    DropdownList.Size = UDim2.new(1, 0, 0, #seeds * 35)
end

SeedDropdown.MouseButton1Click:Connect(function()
    UpdateSeedDropdown()
    DropdownList.Visible = not DropdownList.Visible
    local targetSize = DropdownList.Visible and UDim2.new(1, 0, 0, DropdownLayout.AbsoluteContentSize.Y) or UDim2.new(1, 0, 0, 0)
    local tween = CreateTween(DropdownList, {Size = targetSize}, 0.3, Enum.EasingStyle.Quart)
    tween:Play()
end)

CreateRippleEffect(SeedDropdown)

-- Harvest Section Controls
AutoHarvest = CreateToggle(HarvestContent, "Enable Auto Harvest", Icons.Auto, false, function(value)
    HarvestingStatus = value
end)

for plantType, _ in pairs(HarvestIgnores) do
    CreateToggle(HarvestContent, "Ignore " .. plantType, Icons.Close, false, function(value)
        HarvestIgnores[plantType] = value
    end)
end

-- Buy Section Controls
AutoBuy = CreateToggle(BuyContent, "Enable Auto Buy", Icons.Auto, false, function(value)
    BuyingStatus = value
end)

SelectedSeedStock = CreateToggle(BuyContent, "Buy Selected Seed", Icons.Seed, true)

-- Sell Section Controls
AutoSell = CreateToggle(SellContent, "Enable Auto Sell", Icons.Auto, false, function(value)
    AutoSellStatus = value
end)

SellThreshold = CreateSlider(SellContent, "Sell Threshold", Icons.Money, 10, 100, 50, function(value)
    SellThresholdValue = value
end)

-- Walk Section Controls
AutoWalk = CreateToggle(WalkContent, "Enable Auto Walk", Icons.Auto, false, function(value)
    WalkingStatus = value
end)

AutoWalkAllowRandom = CreateToggle(WalkContent, "Random Walk Points", Icons.Speed, false)

AutoWalkMaxWait = CreateSlider(WalkContent, "Max Walk Wait (s)", Icons.Speed, 1, 10, 3, function(value)
    AutoWalkWaitTime = value
end)

-- Status Labels
local PlantStatus = CreateStatusLabel(PlantContent, "Planting: Inactive", Icons.Plant)
local HarvestStatus = CreateStatusLabel(HarvestContent, "Harvesting: Inactive", Icons.Harvest)
local BuyStatus = CreateStatusLabel(BuyContent, "Buying: Inactive", Icons.Buy)
local SellStatus = CreateStatusLabel(SellContent, "Selling: Inactive", Icons.Sell)
local WalkStatus = CreateStatusLabel(WalkContent, "Walking: Inactive", Icons.Walk)

-- Animation for GUI elements
local function AnimateAll()
    local delay = 0
    for _, section in pairs(ContentFrame:GetChildren()) do
        if section:IsA("Frame") then
            AnimateIn(section, delay)
            delay = delay + 0.1
        end
    end
end

AnimateAll()

-- Automation Logic
local function AutoPlantLoop()
    while true do
        if PlantingStatus and SelectedSeed and HasSeedInInventory(SelectedSeed) then
            PlantStatus.Text = Icons.Plant .. " Planting: Active"
            local position = AutoPlantRandom:GetValue() and GetRandomPlantPosition() or GetPlantPositions()[1]
            if position then
                Plant(position, SelectedSeed)
            end
        else
            PlantStatus.Text = Icons.Plant .. " Planting: Inactive"
        end
        wait(0.5)
    end
end

local function AutoHarvestLoop()
    while true do
        if HarvestingStatus then
            HarvestStatus.Text = Icons.Harvest .. " Harvesting: Active"
            local readyPlants = GetReadyToHarvest()
            for _, plant in pairs(readyPlants) do
                GameEvents.Harvest_RE:FireServer(plant)
                wait(0.2)
            end
        else
            HarvestStatus.Text = Icons.Harvest .. " Harvesting: Inactive"
        end
        wait(0.5)
    end
end

local function AutoBuyLoop()
    while true do
        if BuyingStatus then
            BuyStatus.Text = Icons.Buy .. " Buying: Active"
            if SelectedSeedStock:GetValue() and SelectedSeed then
                BuySeed(SelectedSeed)
            else
                for seedName, _ in pairs(GetOwnedSeeds()) do
                    BuySeed(seedName)
                    wait(0.2)
                end
            end
        else
            BuyStatus.Text = Icons.Buy .. " Buying: Inactive"
        end
        wait(1)
    end
end

local function AutoSellLoop()
    while true do
        if AutoSellStatus then
            local crops = GetInvCrops()
            if #crops >= SellThresholdValue then
                SellStatus.Text = Icons.Sell .. " Selling: Active"
                SellInventory()
            else
                SellStatus.Text = Icons.Sell .. " Selling: Inactive"
            end
        else
            SellStatus.Text = Icons.Sell .. " Selling: Inactive"
        end
        wait(1)
    end
end

local function AutoWalkLoop()
    while true do
        if WalkingStatus then
            WalkStatus.Text = Icons.Walk .. " Walking: Active"
            local position = AutoWalkAllowRandom:GetValue() and GetRandomPlantPosition() or GetPlantPositions()[1]
            if position then
                LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):MoveTo(position)
                wait(math.random(1, AutoWalkWaitTime))
            end
        else
            WalkStatus.Text = Icons.Walk .. " Walking: Inactive"
        end
        wait(0.5)
    end
end

-- Start automation loops
spawn(AutoPlantLoop)
spawn(AutoHarvestLoop)
spawn(AutoBuyLoop)
spawn(AutoSellLoop)
spawn(AutoWalkLoop)

-- Update seed dropdown periodically
spawn(function()
    while true do
        if SeedDropdown.Text == Icons.Seed .. " Select Seed" then
            UpdateSeedDropdown()
        end
        wait(5)
    end
end)

-- NoClip functionality
NoClip = false
local function ToggleNoClip(value)
    NoClip = value
    if value then
        RunService.Stepped:Connect(function()
            if NoClip and LocalPlayer.Character then
                for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
    end
end

CreateToggle(WalkContent, "Enable NoClip", Icons.Speed, false, ToggleNoClip)

-- Initial animation
AnimateIn(MainFrame)
